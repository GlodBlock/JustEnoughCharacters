import org.yaml.snakeyaml.Yaml
import com.google.gson.Gson
import com.google.gson.GsonBuilder

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "architectury-plugin" version "3.4-SNAPSHOT" apply false
    id 'dev.architectury.loom' version '1.1-SNAPSHOT' apply false
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1' apply false
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
}

group = "me.towdium.jecharacters"
archivesBaseName = "jecharacters"
version = "${verspec}.${verbuild}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

allprojects {
    repositories {
        mavenCentral()
        maven { url = "https://maven.architectury.dev/" }
        maven { url = "https://files.minecraftforge.net/maven/" }
        maven { url = "https://maven.minecraftforge.net/" }
        maven { url = "https://jitpack.io" }
        maven { url = "https://maven.blamejared.com/" }
        maven { url = "https://modmaven.dev" }
        maven { url = "https://maven.parchmentmc.org" }
        maven { url = "https://libraries.minecraft.net" }
        maven { url = "https://maven.terraformersmc.com/releases/" }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
        maven { url = "https://modmaven.dev" }
    }
}

configurations {
    shade
    compileOnly.extendsFrom shade
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

enum ProjectType {
    MAIN,
    ROOT,
    COMMON,
    FORGE,
    FABRIC,

    static ProjectType getType(Project p) {
        try {
            if (p.name.contains("main"))
                return MAIN
            return valueOf(p.name.toUpperCase())
        } catch (Exception ignored) {
            return ROOT
        }
    }

    boolean notMain() {
        return this != MAIN
    }

    boolean notRoot() {
        return this != ROOT
    }

    boolean notMainOrRoot() {
        return this != MAIN && this != ROOT
    }

    boolean isFabric() {
        return this == FABRIC
    }

    boolean isForge() {
        return this == FORGE
    }

    boolean isCommon() {
        return this == COMMON
    }

    boolean isImpl() {
        return this == FABRIC || this == FORGE
    }
}

subprojects { Project p ->
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    def type = ProjectType.getType(p)
    if (type.notMain()) {
        apply plugin: 'architectury-plugin'
        if (type.notRoot()) {
            apply plugin: 'io.github.juuxel.loom-quiltflower'
        }
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    p.archivesBaseName = rootProject.archivesBaseName
    p.group = rootProject.group
    p.version = rootProject.version

    if (type != ProjectType.MAIN) {
        def mc_version = type == ProjectType.ROOT ? p.mc_version : p.getParent().mc_version
        p.archivesBaseName += "-${mc_version}-${type.toString().toLowerCase()}"
    }

    p.processResources {
        // Exclude .cache directory which is generated by DataGen.
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        exclude '.cache'
    }

    p.afterEvaluate { Project pAfter ->

        if (type.notRoot()) {
            pAfter.dependencies {
                if (pAfter.configurations.findByName("shadowCommon")) {
                    shadowCommon(group: 'com.github.towdium', name: 'PinIn', version: "${verpinin}") {
                        transitive = false
                    }
                }
            }
        }

        if (type.notMain()) {
            pAfter.dependencies {
                compileOnly rootProject.project(":common-main")
                if (type.fabric) {
                    compileOnly rootProject.project(":fabric-main")
                }
                if (type.forge) {
                    compileOnly rootProject.project(":forge-main")
                }
            }
        }

        if (type.fabric || type.forge) {
            //source sets
            {
                def main = rootProject.project(":common-main")
                pAfter.compileJava {
                    source(main.sourceSets.main.allSource)
                }
                pAfter.sourcesJar {
                    from main.sourceSets.main.allJava
                }
                pAfter.processResources {
                    from main.sourceSets.main.resources
                }

                if (type.fabric) {
                    def fabricBase = rootProject.project(":fabric-main")
                    pAfter.compileJava {
                        source(fabricBase.sourceSets.main.allSource)
                    }
                    pAfter.sourcesJar {
                        from fabricBase.sourceSets.main.allJava
                    }
                    pAfter.processResources {
                        from fabricBase.sourceSets.main.resources
                    }
                }
                if (type.forge) {
                    def forgeBase = rootProject.project(":forge-main")
                    pAfter.compileJava {
                        source(forgeBase.sourceSets.main.allSource)
                    }
                    pAfter.sourcesJar {
                        from forgeBase.sourceSets.main.allJava
                    }
                    pAfter.processResources {
                        from forgeBase.sourceSets.main.resources
                    }
                }
            }

            pAfter.jar {
                archiveClassifier = "slim"
                manifest.attributes([
                        "Specification-Title"     : 'Just Enough Characters',
                        "Specification-Vendor"    : 'Towdium,vfyjxf_',
                        "Specification-Version"   : "${verspec}",
                        "Implementation-Title"    : rootProject.name,
                        "Implementation-Version"  : "${verspec}.${verbuild}",
                        "Implementation-Vendor"   : 'Towdium',
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                ])
            }

        }
    }
}

subprojects { Project p ->
    def type = ProjectType.getType(p)
    if (!type.impl) return

    def targetsJson = p.file("build/resources/main/me/towdium/jecharacters/targets.json")

    p.tasks.register("generateTargetsJson") {
        def generalConfig = p.rootProject.file("generate.yaml")
        def versionConfig = p.parent.file("version_generate.yaml")
        def platformConfig = p.file("platform_generate.yaml")
        Yaml yaml = new Yaml()
        Map<String, Set<String>> all = new HashMap<>()
        putAll(all, yaml.load(generalConfig.text) as Map<String, List<String>>)
        putAll(all, yaml.load(versionConfig.text) as Map<String, List<String>>)
        putAll(all, yaml.load(platformConfig.text) as Map<String, List<String>>)
        String json = new GsonBuilder().setPrettyPrinting().create().toJson(all)
        if (!targetsJson.exists()) {
            targetsJson.parentFile.mkdirs()
            targetsJson.createNewFile()
        }
        targetsJson.write(json)
    }
    p.processResources {
        dependsOn "generateTargetsJson"
    }

}


static void putAll(Map<String, Set<String>> map, Map<String, List<String>> list) {
    list.entrySet().each { entry ->
        map.computeIfAbsent(entry.key, k -> new HashSet<>()).addAll(entry.value)
    }
}


